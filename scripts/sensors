#!/usr/bin/env python3

import roslib
import rospy 
from geometry_msgs.msg import PoseWithCovarianceStamped
import tf
from nav_msgs.msg import Odometry
from std_srvs.srv import Empty
from pylab import randn, sqrt, arctan2, sin, cos
import sys

class Listener:
    def __init__(self):
        
        # get model
        self.sub = rospy.Subscriber('ground_truth', Odometry, self.state_callback)
        self.received = False
                
    def state_callback(self, msg): 
        self.received = True
        self.position = msg.pose.pose.position
        self.orientation = msg.pose.pose.orientation
        
if __name__ == '__main__':
    
    rospy.init_node('nav_odom')

    # unpause physics after a while
    unpause = rospy.ServiceProxy('/gazebo/unpause_physics', Empty)
    #unpause.wait_for_service()
    unpause()
  
    ground_truth = Listener()
    
    # usbl = XY + noise
    usbl_pub = rospy.Publisher('usbl', PoseWithCovarianceStamped, queue_size=10)
    usbl = PoseWithCovarianceStamped()
    depth_pub = rospy.Publisher('depth', PoseWithCovarianceStamped, queue_size=10)
    depth = PoseWithCovarianceStamped()
    usbl_cov = rospy.get_param('~usbl')
    depth_cov = rospy.get_param('~depth')
    
    usbl_std,depth_std = sqrt(usbl_cov), sqrt(depth_cov)
    
    def noise(std):
        return std * randn(1)[0]
    
    usbl.header.frame_id = 'world'
    depth.header.frame_id = 'world'
    for i in (0,7,14):
        usbl.pose.covariance[i] = usbl_cov
    
    depth.pose.covariance[14] = depth_cov
    
    
    T =1./100
    while not rospy.is_shutdown():
        
        # modify ground truth received from Gazebo to simulated visual odom
        if ground_truth.received:
            usbl.pose.pose.position.x = ground_truth.position.x + noise(usbl_std)
            usbl.pose.pose.position.y = ground_truth.position.y + noise(usbl_std)
            usbl.pose.pose.position.z = ground_truth.position.z + noise(usbl_std)
            usbl.pose.pose.orientation.w = 1
            depth.pose.pose.position.z = ground_truth.position.z + noise(depth_std)
            
            usbl.header.stamp = rospy.Time.now()
            depth.header.stamp = rospy.Time.now()
            usbl_pub.publish(usbl)
            depth_pub.publish(depth)
        
        rospy.sleep(T)
